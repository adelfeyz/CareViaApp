// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/smartring_plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SmartringPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SmartringPluginBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SmartringPluginBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int aes128_decrypt(
    ffi.Pointer<ffi.Char> sn,
    int sn_size,
    ffi.Pointer<ffi.Char> company,
    int company_size,
    ffi.Pointer<ffi.Char> data,
    int data_size,
    ffi.Pointer<ffi.Char> out,
  ) {
    return _aes128_decrypt(
      sn,
      sn_size,
      company,
      company_size,
      data,
      data_size,
      out,
    );
  }

  late final _aes128_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>)>>('aes128_decrypt');
  late final _aes128_decrypt = _aes128_decryptPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int toBatteryLevel(
    int voltage,
    bool charging,
    bool wireless,
  ) {
    return _toBatteryLevel(
      voltage,
      charging,
      wireless,
    );
  }

  late final _toBatteryLevelPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Bool, ffi.Bool)>>(
      'toBatteryLevel');
  late final _toBatteryLevel =
      _toBatteryLevelPtr.asFunction<int Function(int, bool, bool)>();

  ffi.Pointer<OxygenSaturationResult> oxygenSaturation(
    ffi.Pointer<ffi.Pointer<SleepArrayElement>> sleepArray,
    int sleepArraySize,
    ffi.Pointer<ffi.Pointer<Data>> historyArray,
    int historyArraySize,
    ffi.Pointer<ffi.Int> resultSize,
  ) {
    return _oxygenSaturation(
      sleepArray,
      sleepArraySize,
      historyArray,
      historyArraySize,
      resultSize,
    );
  }

  late final _oxygenSaturationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OxygenSaturationResult> Function(
              ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Data>>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('oxygenSaturation');
  late final _oxygenSaturation = _oxygenSaturationPtr.asFunction<
      ffi.Pointer<OxygenSaturationResult> Function(
          ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
          int,
          ffi.Pointer<ffi.Pointer<Data>>,
          int,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<SleepArrayElement> createSleepArrayElement(
    int data,
    int startTime,
    int endTime,
  ) {
    return _createSleepArrayElement(
      data,
      startTime,
      endTime,
    );
  }

  late final _createSleepArrayElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SleepArrayElement> Function(
              ffi.Int, ffi.LongLong, ffi.LongLong)>>('createSleepArrayElement');
  late final _createSleepArrayElement = _createSleepArrayElementPtr
      .asFunction<ffi.Pointer<SleepArrayElement> Function(int, int, int)>();

  ffi.Pointer<Data> createDataArrayElement(
    int ts,
    int hr,
    int ox,
  ) {
    return _createDataArrayElement(
      ts,
      hr,
      ox,
    );
  }

  late final _createDataArrayElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Data> Function(
              ffi.LongLong, ffi.Int, ffi.Int)>>('createDataArrayElement');
  late final _createDataArrayElement = _createDataArrayElementPtr
      .asFunction<ffi.Pointer<Data> Function(int, int, int)>();

  ffi.Pointer<HeartRateImmersionResult> heartRateImmersion(
    ffi.Pointer<ffi.Pointer<SleepArrayElement>> sleepArray,
    int sleepArraySize,
    ffi.Pointer<ffi.Pointer<Data>> historyArray,
    int historyArraySize,
    ffi.Pointer<ffi.Pointer<Data>> hrArray,
    int hrArraySize,
    ffi.Pointer<ffi.Int> resultSize,
  ) {
    return _heartRateImmersion(
      sleepArray,
      sleepArraySize,
      historyArray,
      historyArraySize,
      hrArray,
      hrArraySize,
      resultSize,
    );
  }

  late final _heartRateImmersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<HeartRateImmersionResult> Function(
              ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Data>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Data>>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('heartRateImmersion');
  late final _heartRateImmersion = _heartRateImmersionPtr.asFunction<
      ffi.Pointer<HeartRateImmersionResult> Function(
          ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
          int,
          ffi.Pointer<ffi.Pointer<Data>>,
          int,
          ffi.Pointer<ffi.Pointer<Data>>,
          int,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<RespiratoryRateResult> respiratoryRate(
    ffi.Pointer<ffi.Pointer<SleepArrayElement>> sleepArray,
    int sleepArraySize,
    ffi.Pointer<ffi.Pointer<Data>> historyArray,
    int historyArraySize,
    ffi.Pointer<ffi.Int> resultSize,
  ) {
    return _respiratoryRate(
      sleepArray,
      sleepArraySize,
      historyArray,
      historyArraySize,
      resultSize,
    );
  }

  late final _respiratoryRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RespiratoryRateResult> Function(
              ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<Data>>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('respiratoryRate');
  late final _respiratoryRate = _respiratoryRatePtr.asFunction<
      ffi.Pointer<RespiratoryRateResult> Function(
          ffi.Pointer<ffi.Pointer<SleepArrayElement>>,
          int,
          ffi.Pointer<ffi.Pointer<Data>>,
          int,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> formatDateTime(
    int inputTime,
    int isFull,
  ) {
    return _formatDateTime(
      inputTime,
      isFull,
    );
  }

  late final _formatDateTimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.Int)>>('formatDateTime');
  late final _formatDateTime =
      _formatDateTimePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  double caloriesCalculation(
    double height,
    int step,
    double strengthGrade,
  ) {
    return _caloriesCalculation(
      height,
      step,
      strengthGrade,
    );
  }

  late final _caloriesCalculationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Int, ffi.Double)>>('caloriesCalculation');
  late final _caloriesCalculation = _caloriesCalculationPtr
      .asFunction<double Function(double, int, double)>();

  ffi.Pointer<ffi.Pointer<Data>> restingHeartRate(
    ffi.Pointer<ffi.Pointer<Data>> datas,
    int dataSize,
    ffi.Pointer<ffi.Int> resultSize,
  ) {
    return _restingHeartRate(
      datas,
      dataSize,
      resultSize,
    );
  }

  late final _restingHeartRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<Data>> Function(
              ffi.Pointer<ffi.Pointer<Data>>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('restingHeartRate');
  late final _restingHeartRate = _restingHeartRatePtr.asFunction<
      ffi.Pointer<ffi.Pointer<Data>> Function(
          ffi.Pointer<ffi.Pointer<Data>>, int, ffi.Pointer<ffi.Int>)>();

  void v3_calc(
    ffi.Pointer<smp_hr_t> hr_list,
    int len,
    ffi.Pointer<ffi.Pointer<sleep_root>> root,
  ) {
    return _v3_calc(
      hr_list,
      len,
      root,
    );
  }

  late final _v3_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<smp_hr_t>, ffi.Size,
              ffi.Pointer<ffi.Pointer<sleep_root>>)>>('v3_calc');
  late final _v3_calc = _v3_calcPtr.asFunction<
      void Function(
          ffi.Pointer<smp_hr_t>, int, ffi.Pointer<ffi.Pointer<sleep_root>>)>();

  void csem_calc(
    int fusion,
    int use_hr_only,
    ffi.Pointer<csem_sleep_t> csem_slps,
    int slp_len,
    ffi.Pointer<smp_hr_t> hr_list,
    int hr_len,
    ffi.Pointer<ffi.Pointer<sleep_root>> root,
  ) {
    return _csem_calc(
      fusion,
      use_hr_only,
      csem_slps,
      slp_len,
      hr_list,
      hr_len,
      root,
    );
  }

  late final _csem_calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<csem_sleep_t>,
              ffi.Size,
              ffi.Pointer<smp_hr_t>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<sleep_root>>)>>('csem_calc');
  late final _csem_calc = _csem_calcPtr.asFunction<
      void Function(int, int, ffi.Pointer<csem_sleep_t>, int,
          ffi.Pointer<smp_hr_t>, int, ffi.Pointer<ffi.Pointer<sleep_root>>)>();

  void free_activities(
    ffi.Pointer<sleep_root> ba,
  ) {
    return _free_activities(
      ba,
    );
  }

  late final _free_activitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sleep_root>)>>(
          'free_activities');
  late final _free_activities =
      _free_activitiesPtr.asFunction<void Function(ffi.Pointer<sleep_root>)>();

  void timeRepair(
    ffi.Pointer<HistoryData> arr,
    int length,
  ) {
    return _timeRepair(
      arr,
      length,
    );
  }

  late final _timeRepairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<HistoryData>, ffi.Int)>>('timeRepair');
  late final _timeRepair =
      _timeRepairPtr.asFunction<void Function(ffi.Pointer<HistoryData>, int)>();
}

base class Data extends ffi.Struct {
  @ffi.LongLong()
  external int ts;

  @ffi.Int()
  external int hr;

  @ffi.Int()
  external int ox;
}

base class SleepTimePeriod extends ffi.Struct {
  @ffi.LongLong()
  external int startTime;

  @ffi.LongLong()
  external int endTime;
}

base class SleepArrayElement extends ffi.Struct {
  @ffi.Int()
  external int data;

  external SleepTimePeriod sleepTimePeriod;

  external ffi.Pointer<SleepArrayElement> next;
}

base class RespiratoryRateResult extends ffi.Struct {
  external SleepArrayElement timeSlot;

  @ffi.Double()
  external double respiratoryRate;
}

base class HeartRateImmersionResult extends ffi.Struct {
  @ffi.LongLong()
  external int ts;

  @ffi.Double()
  external double restingHeartRate;
}

base class OxygenSaturationResult extends ffi.Struct {
  @ffi.Int()
  external int oxygen;

  @ffi.LongLong()
  external int startTime;

  @ffi.LongLong()
  external int endTime;
}

abstract class sleep_type_t {
  static const int ENUM_SLEEP_STAGING_TYPE_NONE = 0;
  static const int ENUM_SLEEP_STAGING_TYPE_WAKE = 1;
  static const int ENUM_SLEEP_STAGING_TYPE_NREM1 = 2;
  static const int ENUM_SLEEP_STAGING_TYPE_NREM3 = 3;
  static const int ENUM_SLEEP_STAGING_TYPE_REM = 4;
  static const int ENUM_SLEEP_STAGING_TYPE_NAP = 5;
}

base class _each_activity extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.LongLong()
  external int begin;

  @ffi.LongLong()
  external int end;
}

base class _act_smy extends ffi.Struct {
  @ffi.LongLong()
  external int begin;

  @ffi.LongLong()
  external int end;

  @ffi.Double()
  external double avg_hr;

  @ffi.Int()
  external int cnt_acts;

  external ffi.Pointer<each_activity_t> act_list;
}

typedef each_activity_t = _each_activity;

base class _slp_root extends ffi.Struct {
  @ffi.Double()
  external double avg_hr;

  @ffi.Double()
  external double resting_hr;

  @ffi.Int()
  external int count;

  external ffi.Pointer<activity_summary_t> summaries;
}

typedef activity_summary_t = _act_smy;

base class _hr extends ffi.Struct {
  /// 时间戳，毫秒
  @ffi.LongLong()
  external int ts;

  /// 运动数据
  @ffi.Int()
  external int motion;

  /// 心率
  @ffi.Int()
  external int rate;

  /// 变异性
  @ffi.Int()
  external int hrv;

  /// 步数
  @ffi.Int()
  external int steps;
}

base class _csem_sleep extends ffi.Struct {
  @ffi.LongLong()
  external int ts;

  @ffi.Int()
  external int awake_order;

  /// 0: sleep
  /// 1: wake
  @ffi.Int()
  external int type;

  @ffi.Long()
  external int bed_rest_duration;
}

base class HistoryData extends ffi.Struct {
  @ffi.LongLong()
  external int timeStamp;

  @ffi.Int()
  external int heartRate;

  @ffi.Int()
  external int motionDetectionCount;

  @ffi.Int()
  external int detectionMode;

  @ffi.Int()
  external int wearStatus;

  @ffi.Int()
  external int chargeStatus;

  @ffi.Int()
  external int uuid;

  @ffi.Int()
  external int hrv;

  @ffi.Int()
  external int temperature;

  @ffi.Int()
  external int step;

  @ffi.Int()
  external int reStep;

  @ffi.Int()
  external int ox;

  @ffi.Int()
  external int respiratoryRate;
}

typedef smp_hr_t = _hr;
typedef sleep_root = _slp_root;
typedef csem_sleep_t = _csem_sleep;
